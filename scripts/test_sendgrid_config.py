#!/usr/bin/env python3
"""
Teste espec√≠fico para verificar configura√ß√£o do SendGrid
"""

import os
import sys
import requests
from dotenv import load_dotenv

# Adicionar o diret√≥rio atual ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Carregar vari√°veis de ambiente
load_dotenv()

def test_sendgrid_configuration():
    """Testa a configura√ß√£o do SendGrid passo a passo"""
    
    print("üîç VERIFICANDO CONFIGURA√á√ÉO DO SENDGRID")
    print("=" * 50)
    
    # 1. Verificar se o arquivo .env est√° sendo carregado
    print("\n1Ô∏è‚É£ Verificando carregamento do .env...")
    env_file = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env')
    if os.path.exists(env_file):
        print(f"‚úÖ Arquivo .env encontrado: {env_file}")
    else:
        print(f"‚ùå Arquivo .env n√£o encontrado em: {env_file}")
        return False
    
    # 2. Verificar se a vari√°vel SENDGRID_API_KEY est√° definida
    print("\n2Ô∏è‚É£ Verificando vari√°vel SENDGRID_API_KEY...")
    sendgrid_key = os.getenv('SENDGRID_API_KEY')
    if sendgrid_key:
        print(f"‚úÖ SENDGRID_API_KEY encontrada: {sendgrid_key[:10]}...{sendgrid_key[-10:]}")
    else:
        print("‚ùå SENDGRID_API_KEY n√£o encontrada")
        return False
    
    # 3. Verificar formato da chave
    print("\n3Ô∏è‚É£ Verificando formato da chave...")
    if sendgrid_key.startswith('SG.'):
        print("‚úÖ Formato da chave parece correto (come√ßa com 'SG.')")
    else:
        print("‚ö†Ô∏è Formato da chave pode estar incorreto (deveria come√ßar com 'SG.')")
    
    # 4. Verificar outras vari√°veis de email
    print("\n4Ô∏è‚É£ Verificando outras vari√°veis de email...")
    from_email = os.getenv('FROM_EMAIL')
    from_name = os.getenv('FROM_NAME')
    consultant_email = os.getenv('CONSULTANT_EMAIL')
    
    print(f"   - FROM_EMAIL: {from_email}")
    print(f"   - FROM_NAME: {from_name}")
    print(f"   - CONSULTANT_EMAIL: {consultant_email}")
    
    # 5. Testar importa√ß√£o do SendGrid
    print("\n5Ô∏è‚É£ Testando importa√ß√£o do SendGrid...")
    try:
        import sendgrid
        print("‚úÖ Biblioteca SendGrid importada com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro na importa√ß√£o do SendGrid: {e}")
        print("   Execute: pip install sendgrid")
        return False
    
    # 6. Testar cria√ß√£o do cliente
    print("\n6Ô∏è‚É£ Testando cria√ß√£o do cliente SendGrid...")
    try:
        from sendgrid import SendGridAPIClient
        client = SendGridAPIClient(api_key=sendgrid_key)
        print("‚úÖ Cliente SendGrid criado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao criar cliente SendGrid: {e}")
        return False
    
    # 7. Testar conex√£o com a API
    print("\n7Ô∏è‚É£ Testando conex√£o com a API SendGrid...")
    try:
        # Testar endpoint de usu√°rio
        response = client.client.user.account.get()
        print(f"   - Status code: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Conex√£o com API SendGrid bem-sucedida!")
            account_info = response.body
            print(f"   - Email verificado: {account_info.get('email', 'N/A')}")
            print(f"   - Primeiro nome: {account_info.get('first_name', 'N/A')}")
            print(f"   - √öltimo nome: {account_info.get('last_name', 'N/A')}")
        elif response.status_code == 401:
            print("‚ùå Erro 401: API key inv√°lida ou expirada")
            return False
        elif response.status_code == 403:
            print("‚ùå Erro 403: Sem permiss√£o para acessar este recurso")
            return False
        else:
            print(f"‚ùå Erro inesperado: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar conex√£o: {e}")
        return False
    
    # 8. Testar envio de email
    print("\n8Ô∏è‚É£ Testando envio de email...")
    try:
        from sendgrid.helpers.mail import Mail, Email, To, Content
        
        # Criar email de teste
        from_email_obj = Email(from_email, from_name)
        to_email_obj = To(consultant_email or from_email)
        subject = "Teste de Configura√ß√£o - Vibe Scout"
        content = Content("text/plain", "Este √© um email de teste para verificar a configura√ß√£o do SendGrid no Vibe Scout.")
        mail = Mail(from_email_obj, to_email_obj, subject, content)
        
        # Enviar email
        response = client.send(mail)
        
        if response.status_code in [200, 201, 202]:
            print("‚úÖ Email de teste enviado com sucesso!")
            print(f"   - Status code: {response.status_code}")
        else:
            print(f"‚ùå Falha no envio do email: {response.status_code}")
            print(f"   - Headers: {response.headers}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao enviar email de teste: {e}")
        return False
    
    print("\n‚úÖ CONFIGURA√á√ÉO DO SENDGRID VERIFICADA COM SUCESSO!")
    return True

def test_sendgrid_quota():
    """Testa a quota do SendGrid"""
    
    print("\nüìä VERIFICANDO QUOTA DO SENDGRID")
    print("=" * 40)
    
    try:
        sendgrid_key = os.getenv('SENDGRID_API_KEY')
        from sendgrid import SendGridAPIClient
        client = SendGridAPIClient(api_key=sendgrid_key)
        
        # Verificar estat√≠sticas de envio
        response = client.client.user.account.get()
        if response.status_code == 200:
            account_info = response.body
            
            print(f"   - Email: {account_info.get('email', 'N/A')}")
            print(f"   - Tipo de conta: {account_info.get('type', 'N/A')}")
            
            # Tentar obter estat√≠sticas (pode n√£o estar dispon√≠vel em contas gratuitas)
            try:
                stats_response = client.client.stats.get()
                if stats_response.status_code == 200:
                    stats = stats_response.body
                    print(f"   - Estat√≠sticas dispon√≠veis: {len(stats)} registros")
                else:
                    print("   - Estat√≠sticas n√£o dispon√≠veis nesta conta")
            except:
                print("   - Estat√≠sticas n√£o dispon√≠veis nesta conta")
                
    except Exception as e:
        print(f"‚ùå Erro ao verificar quota: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ INICIANDO TESTE DE CONFIGURA√á√ÉO DO SENDGRID")
    print("=" * 60)
    
    # Teste b√°sico de configura√ß√£o
    success = test_sendgrid_configuration()
    
    if success:
        # Teste de quota
        test_sendgrid_quota()
        
        print("\nüéâ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!")
    else:
        print("\nüí• TESTES FALHARAM - VERIFIQUE A CONFIGURA√á√ÉO")

if __name__ == "__main__":
    main() 