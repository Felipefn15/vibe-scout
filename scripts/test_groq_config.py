#!/usr/bin/env python3
"""
Teste espec√≠fico para verificar configura√ß√£o do Groq
"""

import os
import asyncio
import logging
from dotenv import load_dotenv

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Carregar vari√°veis de ambiente
load_dotenv()

async def test_groq_configuration():
    """Testa a configura√ß√£o do Groq passo a passo"""
    
    print("üîç VERIFICANDO CONFIGURA√á√ÉO DO GROQ")
    print("=" * 50)
    
    # 1. Verificar se o arquivo .env est√° sendo carregado
    print("\n1Ô∏è‚É£ Verificando carregamento do .env...")
    env_file = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env')
    if os.path.exists(env_file):
        print(f"‚úÖ Arquivo .env encontrado: {env_file}")
    else:
        print(f"‚ùå Arquivo .env n√£o encontrado em: {env_file}")
        return False
    
    # 2. Verificar se a vari√°vel GROQ_API_KEY est√° definida
    print("\n2Ô∏è‚É£ Verificando vari√°vel GROQ_API_KEY...")
    groq_key = os.getenv('GROQ_API_KEY')
    if groq_key:
        print(f"‚úÖ GROQ_API_KEY encontrada: {groq_key[:10]}...{groq_key[-10:]}")
    else:
        print("‚ùå GROQ_API_KEY n√£o encontrada")
        return False
    
    # 3. Verificar formato da chave
    print("\n3Ô∏è‚É£ Verificando formato da chave...")
    if groq_key.startswith('gsk_'):
        print("‚úÖ Formato da chave parece correto (come√ßa com 'gsk_')")
    else:
        print("‚ö†Ô∏è Formato da chave pode estar incorreto (deveria come√ßar com 'gsk_')")
    
    # 4. Testar importa√ß√£o do cliente LLM
    print("\n4Ô∏è‚É£ Testando importa√ß√£o do cliente LLM...")
    try:
        from llm.llm_client import ModularLLMClient, GroqProvider
        print("‚úÖ M√≥dulos importados com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        return False
    
    # 5. Testar cria√ß√£o do provider
    print("\n5Ô∏è‚É£ Testando cria√ß√£o do GroqProvider...")
    try:
        provider = GroqProvider()
        print(f"‚úÖ GroqProvider criado com sucesso")
        print(f"   - API Key configurada: {'Sim' if provider.api_key else 'N√£o'}")
        print(f"   - Modelos dispon√≠veis: {provider.config.models}")
        print(f"   - Rate limit: {provider.config.rate_limit_per_minute}/min")
    except Exception as e:
        print(f"‚ùå Erro ao criar GroqProvider: {e}")
        return False
    
    # 6. Testar conex√£o com a API
    print("\n6Ô∏è‚É£ Testando conex√£o com a API Groq...")
    try:
        client = ModularLLMClient(['Groq'])
        print("‚úÖ ModularLLMClient criado com sucesso")
        
        # Teste simples
        print("   - Enviando teste de conectividade...")
        response = await client.generate("Teste de conectividade", max_tokens=10)
        
        if response.success:
            print(f"‚úÖ Conex√£o bem-sucedida!")
            print(f"   - Resposta: {response.content}")
            print(f"   - Modelo usado: {response.model}")
            print(f"   - Lat√™ncia: {response.latency:.2f}s")
            print(f"   - Tokens usados: {response.tokens_used}")
        else:
            print(f"‚ùå Falha na conex√£o: {response.error_message}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar conex√£o: {e}")
        return False
    
    # 7. Verificar rate limiting
    print("\n7Ô∏è‚É£ Verificando configura√ß√£o de rate limiting...")
    groq_rate_limit = os.getenv('GROQ_RATE_LIMIT', '45')
    groq_time_window = os.getenv('GROQ_TIME_WINDOW', '60')
    print(f"   - Rate limit configurado: {groq_rate_limit} requests/{groq_time_window}s")
    
    print("\n‚úÖ CONFIGURA√á√ÉO DO GROQ VERIFICADA COM SUCESSO!")
    return True

async def test_groq_models():
    """Testa diferentes modelos do Groq"""
    
    print("\nüß™ TESTANDO DIFERENTES MODELOS")
    print("=" * 40)
    
    try:
        from llm.llm_client import ModularLLMClient
        
        client = ModularLLMClient(['Groq'])
        models = ["llama3-8b-8192", "mixtral-8x7b-32768", "gemma2-9b-it"]
        
        for model in models:
            print(f"\nüìù Testando modelo: {model}")
            try:
                response = await client.generate(
                    "Responda apenas 'OK' se estiver funcionando",
                    model=model,
                    max_tokens=5
                )
                
                if response.success:
                    print(f"   ‚úÖ {model}: {response.content.strip()}")
                else:
                    print(f"   ‚ùå {model}: {response.error_message}")
                    
            except Exception as e:
                print(f"   ‚ùå {model}: Erro - {e}")
                
    except Exception as e:
        print(f"‚ùå Erro ao testar modelos: {e}")

async def main():
    """Fun√ß√£o principal"""
    print("üöÄ INICIANDO TESTE DE CONFIGURA√á√ÉO DO GROQ")
    print("=" * 60)
    
    # Teste b√°sico de configura√ß√£o
    success = await test_groq_configuration()
    
    if success:
        # Teste de modelos
        await test_groq_models()
        
        print("\nüéâ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!")
    else:
        print("\nüí• TESTES FALHARAM - VERIFIQUE A CONFIGURA√á√ÉO")

if __name__ == "__main__":
    asyncio.run(main()) 